# src\api\swagger.yaml

openapi: 3.0.0
info:
  title: Cleared API
  version: 1.0.0
  description: REST API documentation for Cleared project

servers:
  - url: /api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ApiResponseSuccess:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          nullable: true
          description: The result data (can be object, array, boolean, etc.)
        error:
          type: "null"
          example: null

    ApiResponseError:
      type: object
      properties:
        status:
          type: string
          example: "error"
        data:
          type: "null"
          example: null
        error:
          type: object
          properties:
            message:
              type: string
            details:
              type: object
              nullable: true
          required: [message]
          example:
            message: "Not found"
            details: null

    Volunteer:
      type: object
      properties:
        volunteer_id:
          type: integer
        volunteer_name:
          type: string
        volunteer_email:
          type: string
        password:
          type: string
        role:
          type: string
          enum: [admin, attendee]
      required: [volunteer_name, volunteer_email, password]

    VolunteerSafe:
      type: object
      properties:
        volunteer_id:
          type: integer
        volunteer_name:
          type: string
        volunteer_email:
          type: string
        role:
          type: string
          enum: [admin, attendee]

    Collection:
      type: object
      properties:
        collection_id:
          type: integer
        collection_date:
          type: string
          format: date
        collection_place:
          type: string

    Garbage:
      type: object
      properties:
        garbage_id:
          type: integer
        collection_id:
          type: integer
          nullable: true
        garbage_type:
          type: string
        quantity_kg:
          type: number
          format: float

    VolunteerCollection:
      type: object
      properties:
        volunteer_collection_id:
          type: integer
        volunteer_id:
          type: integer
          nullable: true
        collection_id:
          type: integer
          nullable: true

paths:
  /auth/register:
  post:
    summary: Register a new volunteer
    tags: [Authentication]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              volunteer_name:
                type: string
              volunteer_email:
                type: string
              password:
                type: string
              role:
                type: string
                enum: [admin, attendee]
          example:
            volunteer_name: "John Doe"
            volunteer_email: "john@example.com"
            password: "SecurePass123!"
            role: "attendee"
    responses:
      201:
        description: Volunteer registered
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ApiResponseSuccess"
                - type: object
                  properties:
                    data:
                      $ref: "#/components/schemas/VolunteerSafe"
            example:
              status: "success"
              data:
                volunteer_id: 1
                volunteer_name: "John Doe"
                volunteer_email: "john@example.com"
                role: "attendee"
              error: null
      400:
        description: Bad Request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Missing fields"
                details: null
      500:
        description: Internal Server Error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Failed to register"
                details: null

/auth/login:
  post:
    summary: Login as volunteer
    tags: [Authentication]
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              volunteer_email:
                type: string
              password:
                type: string
          example:
            volunteer_email: "john@example.com"
            password: "SecurePass123!"
    responses:
      200:
        description: Successful login
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ApiResponseSuccess"
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        accessToken:
                          type: string
                        user:
                          $ref: "#/components/schemas/VolunteerSafe"
            example:
              status: "success"
              data:
                accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6..."
                user:
                  volunteer_id: 1
                  volunteer_name: "John Doe"
                  volunteer_email: "john@example.com"
                  role: "attendee"
              error: null
      400:
        description: Missing credentials
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Missing credentials"
                details: null
      401:
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Invalid credentials"
                details: null
      500:
        description: Internal Server Error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Login failed"
                details: null

/auth/refresh:
  post:
    summary: Refresh access token using refresh_token cookie
    tags: [Authentication]
    responses:
      200:
        description: Access token refreshed
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ApiResponseSuccess"
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        accessToken:
                          type: string
                        user:
                          $ref: "#/components/schemas/VolunteerSafe"
            example:
              status: "success"
              data:
                accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6..."
                user:
                  volunteer_id: 1
                  volunteer_name: "John Doe"
                  volunteer_email: "john@example.com"
                  role: "attendee"
              error: null
      401:
        description: Unauthorized
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Invalid refresh token"
                details: null
      500:
        description: Internal Server Error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Could not refresh token"
                details: null

/auth/logout:
  post:
    summary: Logout user (removes refresh token)
    tags: [Authentication]
    responses:
      200:
        description: Successfully logged out
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseSuccess"
            example:
              status: "success"
              data: true
              error: null
      500:
        description: Internal Server Error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Logout failed"
                details: null

  /collections:
    get:
      summary: Get all collections
      tags: [Collection]
      responses:
        200:
          description: List of collections
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponseSuccess"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Collection"
              example:
                status: "success"
                data:
                  - collection_id: 1
                    collection_date: "2024-06-22"
                    collection_place: "Paris"
                  - collection_id: 2
                    collection_date: "2024-06-23"
                    collection_place: "Lyon"
                error: null
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Could not fetch collections"
                  details: null

    post:
      summary: Create collection
      tags: [Collection]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collection_date:
                  type: string
                  format: date
                collection_place:
                  type: string
            example:
              collection_date: "2024-06-25"
              collection_place: "Marseille"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponseSuccess"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Collection"
              example:
                status: "success"
                data:
                  collection_id: 11
                  collection_date: "2024-06-25"
                  collection_place: "Marseille"
                error: null
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Missing 'collection_date' or 'collection_place' in body"
                  details: null
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Could not create collection"
                  details: null

  /collections/{collection_id}:
    get:
      summary: Get collection by id
      tags: [Collection]
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Collection found
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponseSuccess"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Collection"
              example:
                status: "success"
                data:
                  collection_id: 1
                  collection_date: "2024-06-22"
                  collection_place: "Paris"
                error: null
        400:
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Invalid collection collection_id"
                  details: null
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Collection not found"
                  details: null

    put:
      summary: Update collection
      tags: [Collection]
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collection_date:
                  type: string
                  format: date
                collection_place:
                  type: string
            example:
              collection_place: "Nice"
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponseSuccess"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Collection"
              example:
                status: "success"
                data:
                  collection_id: 1
                  collection_date: "2024-06-22"
                  collection_place: "Nice"
                error: null
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Invalid collection collection_id"
                  details: null
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Collection not found"
                  details: null
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Could not update collection"
                  details: null

    delete:
      summary: Delete collection
      tags: [Collection]
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Deleted (returns boolean in data)
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponseSuccess"
                  - type: object
                    properties:
                      data:
                        type: boolean
              example:
                status: "success"
                data: true
                error: null
        400:
          description: Invalid ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Invalid collection collection_id"
                  details: null
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Collection not found"
                  details: null
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Could not delete collection"
                  details: null

  /garbage:
    get:
      summary: Get all garbage items
      tags: [Garbage]
      responses:
        200:
          description: List of garbage
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponseSuccess"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Garbage"
              example:
                status: "success"
                data:
                  - garbage_id: 1
                    collection_id: 1
                    garbage_type: "Plastic"
                    quantity_kg: 2.5
                  - garbage_id: 2
                    collection_id: 1
                    garbage_type: "Paper"
                    quantity_kg: 4.1
                error: null
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Failed to fetch garbage"
                  details: null

    post:
      summary: Create a garbage item
      tags: [Garbage]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collection_id:
                  type: integer
                  nullable: true
                garbage_type:
                  type: string
                quantity_kg:
                  type: number
                  format: float
            example:
              collection_id: 1
              garbage_type: "Plastic"
              quantity_kg: 2.5
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponseSuccess"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Garbage"
              example:
                status: "success"
                data:
                  garbage_id: 10
                  collection_id: 1
                  garbage_type: "Plastic"
                  quantity_kg: 2.5
                error: null
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Missing required fields"
                  details: null
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Failed to create garbage"
                  details: null

/garbage/{garbage_id}:
  get:
    summary: Get a garbage item by id
    tags: [Garbage]
    parameters:
      - name: garbage_id
        in: path
        required: true
        schema:
          type: integer
    responses:
      200:
        description: Garbage found
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ApiResponseSuccess"
                - type: object
                  properties:
                    data:
                      $ref: "#/components/schemas/Garbage"
            example:
              status: "success"
              data:
                garbage_id: 2
                collection_id: 1
                garbage_type: "Paper"
                quantity_kg: 4.1
              error: null
      400:
        description: Invalid ID
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Invalid id"
                details: null
      404:
        description: Not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Not found"
                details: null

  put:
    summary: Update a garbage item
    tags: [Garbage]
    parameters:
      - name: garbage_id
        in: path
        required: true
        schema:
          type: integer
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              collection_id:
                type: integer
                nullable: true
              garbage_type:
                type: string
              quantity_kg:
                type: number
                format: float
          example:
            garbage_type: "Glass"
            quantity_kg: 3.7
    responses:
      200:
        description: Updated
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ApiResponseSuccess"
                - type: object
                  properties:
                    data:
                      $ref: "#/components/schemas/Garbage"
            example:
              status: "success"
              data:
                garbage_id: 2
                collection_id: 1
                garbage_type: "Glass"
                quantity_kg: 3.7
              error: null
      400:
        description: Bad Request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Invalid id"
                details: null
      404:
        description: Not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Not found"
                details: null
      500:
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Failed to update garbage"
                details: null

  delete:
    summary: Delete a garbage item
    tags: [Garbage]
    parameters:
      - name: garbage_id
        in: path
        required: true
        schema:
          type: integer
    responses:
      200:
        description: Deleted (returns boolean in data)
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ApiResponseSuccess"
                - type: object
                  properties:
                    data:
                      type: boolean
            example:
              status: "success"
              data: true
              error: null
      400:
        description: Invalid ID
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Invalid id"
                details: null
      404:
        description: Not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Not found"
                details: null
      500:
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Failed to delete garbage"
                details: null

  /volunteers:
    get:
      summary: Get all volunteers
      tags: [Volunteer]
      responses:
        200:
          description: List of volunteers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponseSuccess"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/VolunteerSafe"
              example:
                status: "success"
                data:
                  - volunteer_id: 1
                    volunteer_name: "Alice"
                    volunteer_email: "alice@example.com"
                    role: "attendee"
                  - volunteer_id: 2
                    volunteer_name: "Bob"
                    volunteer_email: "bob@example.com"
                    role: "admin"
                error: null
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Failed to fetch volunteers"
                  details: null

    post:
      summary: Create a volunteer
      tags: [Volunteer]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Volunteer"
            example:
              volunteer_name: "Charlie"
              volunteer_email: "charlie@example.com"
              password: "SuperSecret123"
              role: "attendee"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponseSuccess"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/VolunteerSafe"
              example:
                status: "success"
                data:
                  volunteer_id: 3
                  volunteer_name: "Charlie"
                  volunteer_email: "charlie@example.com"
                  role: "attendee"
                error: null
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Missing required fields"
                  details: null
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Failed to create volunteer"
                  details: null

/volunteers/{volunteer_id}:
  get:
    summary: Get volunteer by id
    tags: [Volunteer]
    parameters:
      - name: volunteer_id
        in: path
        required: true
        schema:
          type: integer
    responses:
      200:
        description: Volunteer found
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ApiResponseSuccess"
                - type: object
                  properties:
                    data:
                      $ref: "#/components/schemas/VolunteerSafe"
            example:
              status: "success"
              data:
                volunteer_id: 2
                volunteer_name: "Bob"
                volunteer_email: "bob@example.com"
                role: "admin"
              error: null
      400:
        description: Invalid ID
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Invalid id"
                details: null
      404:
        description: Not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Not found"
                details: null

  put:
    summary: Update a volunteer
    tags: [Volunteer]
    parameters:
      - name: volunteer_id
        in: path
        required: true
        schema:
          type: integer
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              volunteer_name:
                type: string
              volunteer_email:
                type: string
              password:
                type: string
              role:
                type: string
                enum: [admin, attendee]
          example:
            volunteer_name: "Bobby"
            role: "attendee"
    responses:
      200:
        description: Updated
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ApiResponseSuccess"
                - type: object
                  properties:
                    data:
                      $ref: "#/components/schemas/VolunteerSafe"
            example:
              status: "success"
              data:
                volunteer_id: 2
                volunteer_name: "Bobby"
                volunteer_email: "bob@example.com"
                role: "attendee"
              error: null
      400:
        description: Invalid ID or Bad Request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Invalid id"
                details: null
      404:
        description: Not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Not found"
                details: null
      500:
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Failed to update volunteer"
                details: null

  delete:
    summary: Delete a volunteer
    tags: [Volunteer]
    parameters:
      - name: volunteer_id
        in: path
        required: true
        schema:
          type: integer
    responses:
      200:
        description: Deleted (boolean in data)
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ApiResponseSuccess"
                - type: object
                  properties:
                    data:
                      type: boolean
            example:
              status: "success"
              data: true
              error: null
      400:
        description: Invalid ID
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Invalid id"
                details: null
      404:
        description: Not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Not found"
                details: null
      500:
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Failed to delete volunteer"
                details: null

  /volunteer_collection:
    get:
      summary: Get all volunteer_collection links
      tags: [VolunteerCollection]
      responses:
        200:
          description: List of volunteer_collections
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponseSuccess"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/VolunteerCollection"
              example:
                status: "success"
                data:
                  - volunteer_collection_id: 1
                    volunteer_id: 2
                    collection_id: 1
                  - volunteer_collection_id: 2
                    volunteer_id: 3
                    collection_id: 2
                error: null
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Failed to fetch volunteer_collection"
                  details: null

    post:
      summary: Create a volunteer_collection link
      tags: [VolunteerCollection]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                volunteer_id:
                  type: integer
                collection_id:
                  type: integer
            example:
              volunteer_id: 3
              collection_id: 2
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponseSuccess"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/VolunteerCollection"
              example:
                status: "success"
                data:
                  volunteer_collection_id: 3
                  volunteer_id: 3
                  collection_id: 2
                error: null
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Missing required fields"
                  details: null
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponseError"
              example:
                status: "error"
                data: null
                error:
                  message: "Failed to create volunteer_collection"
                  details: null

/volunteer_collection/{volunteer_collection_id}:
  get:
    summary: Get a volunteer_collection by id
    tags: [VolunteerCollection]
    parameters:
      - name: volunteer_collection_id
        in: path
        required: true
        schema:
          type: integer
    responses:
      200:
        description: VolunteerCollection found
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ApiResponseSuccess"
                - type: object
                  properties:
                    data:
                      $ref: "#/components/schemas/VolunteerCollection"
            example:
              status: "success"
              data:
                volunteer_collection_id: 2
                volunteer_id: 3
                collection_id: 2
              error: null
      400:
        description: Invalid ID
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Invalid id"
                details: null
      404:
        description: Not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Not found"
                details: null

  put:
    summary: Update a volunteer_collection
    tags: [VolunteerCollection]
    parameters:
      - name: volunteer_collection_id
        in: path
        required: true
        schema:
          type: integer
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              volunteer_id:
                type: integer
              collection_id:
                type: integer
          example:
            volunteer_id: 1
            collection_id: 2
    responses:
      200:
        description: Updated
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ApiResponseSuccess"
                - type: object
                  properties:
                    data:
                      $ref: "#/components/schemas/VolunteerCollection"
            example:
              status: "success"
              data:
                volunteer_collection_id: 2
                volunteer_id: 1
                collection_id: 2
              error: null
      400:
        description: Invalid ID or Bad Request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Invalid id"
                details: null
      404:
        description: Not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Not found"
                details: null
      500:
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Failed to update volunteer_collection"
                details: null

  delete:
    summary: Delete a volunteer_collection
    tags: [VolunteerCollection]
    parameters:
      - name: volunteer_collection_id
        in: path
        required: true
        schema:
          type: integer
    responses:
      200:
        description: Deleted (boolean in data)
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/ApiResponseSuccess"
                - type: object
                  properties:
                    data:
                      type: boolean
            example:
              status: "success"
              data: true
              error: null
      400:
        description: Invalid ID
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Invalid id"
                details: null
      404:
        description: Not found
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Not found"
                details: null
      500:
        description: Internal server error
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiResponseError"
            example:
              status: "error"
              data: null
              error:
                message: "Failed to delete volunteer_collection"
                details: null
